name: Primary Build
on:
  - push
  - workflow_dispatch

env:
  MAVEN_REPO_URL: ${{ vars.MAVEN_REPO_URL }}
  MAVEN_PRIVATE_SNAPSHOT_REPO_URL: ${{ vars.MAVEN_PRIVATE_SNAPSHOT_REPO_URL }}
  MAVEN_PRIVATE_RELEASE_REPO_URL: ${{ vars.MAVEN_PRIVATE_RELEASE_REPO_URL }}
  MAVEN_REPO_USERNAME: ${{ secrets.MAVEN_REPO_USERNAME }}
  MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
  IMAGE_REGISTRY_USERNAME: ${{ secrets.IMAGE_REGISTRY_USERNAME }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  IMAGE_REGISTRY_HOST: ${{ vars.IMAGE_REGISTRY_HOST }}

jobs:
  build:
    runs-on: arc-runners
    outputs:
      unique_image_version: ${{ steps.set_build_vars.outputs.unique_image_version }}
      generic_image_version: ${{ steps.set_build_vars.outputs.generic_image_version }}
      artifact_version: ${{ steps.set_build_vars.outputs.artifact_version }}
      artifact_id: ${{ steps.set_build_vars.outputs.artifact_id }}
      scm_tag_type: ${{ steps.set_build_vars.outputs.scm_tag_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - uses: s4u/maven-settings-action@v3.0.0
        with:
          servers: |
            [
            {"id": "private-snapshots", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"},
            {"id": "private-releases", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"},
            {"id": "nexus", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"}
            ]
          mirrors: |
            [
            {"id": "nexus", "name":"nexus", "mirrorOf":"*", "url":"${{ env.MAVEN_REPO_URL }}"}
            ]

      - name: Set up vars
        id: set_build_vars
        run: |
          ARTIFACT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          
          echo "artifact_id=$ARTIFACT_ID" >> "$GITHUB_OUTPUT"
          echo "artifact_version=$ARTIFACT_VERSION" >> "$GITHUB_OUTPUT"
          echo "artifact_id=$ARTIFACT_ID" >> "$GITHUB_ENV"
          echo "artifact_version=$ARTIFACT_VERSION" >> "$GITHUB_ENV"
          
          TAG_NAME=${{ github.ref_name }}

          if [[ "$TAG_NAME" =~ ^[0-9]+(\.[0-9]+)*(-[a-zA-Z0-9]+)?$ ]]; then
            SCM_TAG_TYPE="release"
          else
            SCM_TAG_TYPE="snapshot"
          fi
          
          echo "SCM_TAG_TYPE=$SCM_TAG_TYPE" >> $GITHUB_ENV
          echo "scm_tag_type=$SCM_TAG_TYPE" >> "$GITHUB_OUTPUT"

          UNIQUE_IMAGE_VERSION="$ARTIFACT_VERSION-${GITHUB_SHA::10}"
          GENERIC_IMAGE_VERSION="$ARTIFACT_VERSION"
          
          echo "unique_image_version=$UNIQUE_IMAGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "generic_image_version=$GENERIC_IMAGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "UNIQUE_IMAGE_VERSION=$UNIQUE_IMAGE_VERSION" >> $GITHUB_ENV
          echo "GENERIC_IMAGE_VERSION=$GENERIC_IMAGE_VERSION" >> $GITHUB_ENV

      - name: Logging env
        run: printenv

      - name: Maven Test Build
        run: >
          mvn -f pom.xml clean verify -Dcontainer.image.version=${{env.UNIQUE_IMAGE_VERSION}}

  sonar_cve_scan:
    runs-on: arc-runners
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

  maven-deploy:
    runs-on: arc-runners
    needs: [build, sonar_cve_scan]
    env:
      UNIQUE_IMAGE_VERSION: ${{ needs.build.outputs.unique_image_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - uses: s4u/maven-settings-action@v3.0.0
        with:
          servers: |
            [
            {"id": "private-snapshots", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"},
            {"id": "private-releases", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"},
            {"id": "nexus", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"}
            ]
          mirrors: |
            [
            {"id": "nexus", "name":"nexus", "mirrorOf":"*", "url":"${{ env.MAVEN_REPO_URL }}"}
            ]

      - name: Maven Repo Deploy
        run: >
          mvn -f pom.xml clean deploy -Dcontainer.image.version=${{env.UNIQUE_IMAGE_VERSION}} \
            -DskipTests=true \
            -DaltSnapshotDeploymentRepository=private-snapshots::default::${{env.MAVEN_PRIVATE_SNAPSHOT_REPO_URL}} \
            -DaltReleaseDeploymentRepository=private-releases::default::${{env.MAVEN_PRIVATE_RELEASE_REPO_URL}}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.UNIQUE_IMAGE_VERSION}}.jar
          path: target/*.jar
          retention-days: 1

  docker:
    runs-on: arc-runners
    needs: [build,maven-deploy]
    env:
      UNIQUE_IMAGE_VERSION: ${{ needs.build.outputs.unique_image_version }}
      GENERIC_IMAGE_VERSION: ${{ needs.build.outputs.generic_image_version }}
    steps:
      - name: Logging env
        run: printenv

      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Download build artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{env.UNIQUE_IMAGE_VERSION}}.jar
          path: target

      - name: Login to internal private docker repo
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY_HOST}}
          username: ${{ env.IMAGE_REGISTRY_USERNAME }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

      - name: Login to internal docker proxy
        uses: docker/login-action@v3
        with:
          registry: docker-proxy.krystof.io
          username: ${{ env.IMAGE_REGISTRY_USERNAME }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

      - name: Build Docker image
        run: ls -lRt && docker build -t ${{ env.IMAGE_REGISTRY_HOST}}/${{github.repository}}:${{ env.UNIQUE_IMAGE_VERSION }} .

      - name: Push Docker image
        run: docker push ${{ env.IMAGE_REGISTRY_HOST}}/${{github.repository}}:${{ env.UNIQUE_IMAGE_VERSION }}

      - name: Tag Docker image with generic version tag
        run: |
          docker tag ${{ env.IMAGE_REGISTRY_HOST}}/${{github.repository}}:${{ env.UNIQUE_IMAGE_VERSION }} \
            ${{ env.IMAGE_REGISTRY_HOST}}/${{github.repository}}:${{ env.GENERIC_IMAGE_VERSION }}
          docker push ${{ env.IMAGE_REGISTRY_HOST}}/${{github.repository}}:${{ env.GENERIC_IMAGE_VERSION }}

  deploy-to-dev:
    needs: [build,docker]
    if: ${{ github.ref_type == 'branch'  }}
    uses: krystof-io/common-workflows/.github/workflows/deploy-app.yaml@main
    with:
      target_env: dev
      artifact_id: ${{ needs.build.outputs.artifact_id }}
      image_version: ${{ needs.build.outputs.unique_image_version }}
    secrets: inherit

  deploy-to-test:
    needs: [build,docker]
    if: ${{ github.ref_type == 'tag' &&  needs.build.outputs.scm_tag_type == 'snapshot'}}
    uses: krystof-io/common-workflows/.github/workflows/deploy-app.yaml@main
    with:
      target_env: test
      artifact_id: ${{ needs.build.outputs.artifact_id }}
      image_version: ${{ needs.build.outputs.unique_image_version }}
    secrets: inherit

  deploy-to-prod:
    needs: [build,docker]
    if: ${{ github.ref_type == 'tag' &&  needs.build.outputs.scm_tag_type == 'release'}}
    uses: krystof-io/common-workflows/.github/workflows/deploy-app.yaml@main
    with:
      target_env: prod
      artifact_id: ${{ needs.build.outputs.artifact_id }}
      image_version: ${{ needs.build.outputs.generic_image_version }}
    secrets: inherit
